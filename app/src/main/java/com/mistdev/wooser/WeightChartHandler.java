package com.mistdev.wooser;

import android.content.Context;
import android.support.annotation.ColorRes;
import android.support.v4.content.ContextCompat;
import android.widget.Button;

import com.mistdev.android_extensions.parsers.DateParser;
import com.mistdev.wooser.data.models.WeightEntry;
import com.mistdev.wooser.enums.StatisticPeriod;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import lecho.lib.hellocharts.formatter.SimpleAxisValueFormatter;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.view.LineChartView;

/**
 * Created by mcastro on 30/03/17.
 */

public class WeightChartHandler {

    public static @ColorRes int statisticSelectedPeriodColor = R.color.color_gray_dark;
    public static @ColorRes int statisticPeriodColor = R.color.colorPrimary;

    public static void updateChart(Context context, LineChartView chart, ArrayList<WeightEntry> weightEntries) {

        if(context == null || chart == null || weightEntries == null) {
            return;
        }

        Collections.sort(weightEntries, new Comparator<WeightEntry>() {
            @Override
            public int compare(WeightEntry o1, WeightEntry o2) {
                return o1.getDate() < o2.getDate() ? -1 : 0;
            }
        });

        List<PointValue> points = new ArrayList<>();
        List<AxisValue> axisXValues = new ArrayList<>();
        Calendar calendar = Calendar.getInstance();

        for(int i = 0; i < weightEntries.size(); i++) {

            WeightEntry weightEntry = weightEntries.get(i);
            float weight = WeightHelper.convertKilogramsToLoggedUserWeightUnit(weightEntry.getWeightKg());
            points.add(new PointValue(i, weight));

            calendar.setTimeInMillis(weightEntry.getDate());
            String xLabel = DateParser.calendarToLocalizedString(calendar, context.getString(R.string.dateformat_chart));

            AxisValue axisValue = new AxisValue(i);
            axisValue.setLabel(xLabel);
            axisXValues.add(axisValue);
        }

        int lineColor = ContextCompat.getColor(context, R.color.colorPrimary);

        Line line = new Line(points).setColor(lineColor).setCubic(false);
        List<Line> lines = new ArrayList<>();
        lines.add(line);
        LineChartData lineChartData = new LineChartData();
        lineChartData.setLines(lines);

        // Init x-axis
        Axis axisX = new Axis(axisXValues);
        axisX.setHasLines(true);
        axisX.setMaxLabelChars(6); //label layout space
        lineChartData.setAxisXBottom(axisX);

        // Init y-axis
        Axis axisY = new Axis();
        SimpleAxisValueFormatter formatter = new SimpleAxisValueFormatter();
        formatter.setDecimalDigitsNumber(2);
        axisY.setFormatter(formatter);
        axisY.setAutoGenerated(true);
        axisY.setHasLines(true);
        axisY.setMaxLabelChars(5); //label layout space
        lineChartData.setAxisYLeft(axisY);

        // Update chart with new data.
        chart.setInteractive(false);
        chart.setLineChartData(lineChartData);
    }

    public static void selectedStatisticPeriodChanged(Context context,
                                                      @StatisticPeriod.Def int selectedPeriod, @StatisticPeriod.Def int previousPeriod,
                                                      Button btnOneWeek, Button btnOneMonth, Button btnSixMonths, Button btnOneYear) {
        //Select the clicked button
        switch (selectedPeriod) {

            case StatisticPeriod.ONE_WEEK:
                btnOneWeek.setTextColor(ContextCompat.getColor(context, statisticSelectedPeriodColor));
                break;

            case StatisticPeriod.ONE_MONTH:
                btnOneMonth.setTextColor(ContextCompat.getColor(context, statisticSelectedPeriodColor));
                break;

            case StatisticPeriod.SIX_MONTHS:
                btnSixMonths.setTextColor(ContextCompat.getColor(context, statisticSelectedPeriodColor));
                break;

            case StatisticPeriod.ONE_YEAR:
                btnOneYear.setTextColor(ContextCompat.getColor(context, statisticSelectedPeriodColor));
                break;
        }

        //Previously selected should be deselected
        switch (previousPeriod) {

            case StatisticPeriod.ONE_WEEK:
                btnOneWeek.setTextColor(ContextCompat.getColor(context, statisticPeriodColor));
                break;

            case StatisticPeriod.ONE_MONTH:
                btnOneMonth.setTextColor(ContextCompat.getColor(context, statisticPeriodColor));
                break;

            case StatisticPeriod.SIX_MONTHS:
                btnSixMonths.setTextColor(ContextCompat.getColor(context, statisticPeriodColor));
                break;

            case StatisticPeriod.ONE_YEAR:
                btnOneYear.setTextColor(ContextCompat.getColor(context, statisticPeriodColor));
                break;
        }
    }

}
